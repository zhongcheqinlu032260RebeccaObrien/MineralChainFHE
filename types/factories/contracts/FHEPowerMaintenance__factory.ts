/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../common";
import type {
  FHEPowerMaintenance,
  FHEPowerMaintenanceInterface,
} from "../../contracts/FHEPowerMaintenance";

const _abi = [
  {
    inputs: [],
    name: "HandlesAlreadySavedForRequestID",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidKMSSignatures",
    type: "error",
  },
  {
    inputs: [],
    name: "NoHandleFoundForRequestID",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "timestamp",
        type: "uint256",
      },
    ],
    name: "DataSubmitted",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "requestID",
        type: "uint256",
      },
    ],
    name: "DecryptionFulfilled",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
    ],
    name: "PredictionProcessed",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
    ],
    name: "PredictionRequested",
    type: "event",
  },
  {
    inputs: [],
    name: "dataCount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "requestId",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "cleartexts",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "proof",
        type: "bytes",
      },
    ],
    name: "decryptEquipmentCount",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "encryptedData",
    outputs: [
      {
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
      {
        internalType: "euint32",
        name: "encryptedTemperature",
        type: "bytes32",
      },
      {
        internalType: "euint32",
        name: "encryptedVibration",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "timestamp",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "equipmentId",
        type: "string",
      },
    ],
    name: "getEncryptedEquipmentCount",
    outputs: [
      {
        internalType: "euint32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "dataId",
        type: "uint256",
      },
    ],
    name: "getPrediction",
    outputs: [
      {
        internalType: "string",
        name: "equipmentId",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "predictedRUL",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "isProcessed",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "predictions",
    outputs: [
      {
        internalType: "string",
        name: "equipmentId",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "predictedRUL",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "isProcessed",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "requestId",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "cleartexts",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "proof",
        type: "bytes",
      },
    ],
    name: "processPrediction",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "protocolId",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "equipmentId",
        type: "string",
      },
    ],
    name: "requestEquipmentCountDecryption",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "dataId",
        type: "uint256",
      },
    ],
    name: "requestPrediction",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "euint32",
        name: "encryptedTemperature",
        type: "bytes32",
      },
      {
        internalType: "euint32",
        name: "encryptedVibration",
        type: "bytes32",
      },
    ],
    name: "submitEncryptedSensorData",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234610154575f6060610014610158565b828152826020820152826040820152015261002d610158565b606073687820221192c5b662b25367f70076a37bc79b6c9182815273848b0066793bcc60346da1f49049357399b8d59580602083015273a02cda4ca3a71d7c46997716f4283aa851c2881291826040820152731364cbbf2cdf5032c47d8226a6f6fbd2afcdacac938491015260018060a01b0319937f9e7b61f58c47dc699ac88507c4f5bb9f121c03808c5676a8078fe583e464970090858254161790557f9e7b61f58c47dc699ac88507c4f5bb9f121c03808c5676a8078fe583e464970190848254161790557f9e7b61f58c47dc699ac88507c4f5bb9f121c03808c5676a8078fe583e464970290838254161790557f9e7b61f58c47dc699ac88507c4f5bb9f121c03808c5676a8078fe583e4649703918254161790556040516117c0908161018c8239f35b5f80fd5b60405190608082016001600160401b0381118382101761017757604052565b634e487b7160e01b5f52604160045260245ffdfe604060808152600480361015610013575f80fd5b5f3560e01c80624fbbb014610e9157806321ff84bc14610e575780635da40c4714610e3a578063667e0c4a14610b60578063a05112fc14610b16578063adeb19e5146108e2578063b6cad96d146105be578063cadcfc301461056e578063da1f12ab14610552578063ec7df847146100dd5763fe83bece14610093575f80fd5b346100d95760203660031901126100d957355f526002602052805f20906100d56001830154926100ca60ff60028301541691610f72565b92519384938461105a565b0390f35b5f80fd5b5090346100d9576100ed3661112a565b90825f9493945260209160058352835f205494851561051d57908261011192611415565b805181019082818184019303126100d9578281015167ffffffffffffffff918282116100d957019180603f840112156100d957838301519282841161050a578360051b9086519461016487840187610f50565b855286868601928201019283116100d95786869101915b8383106104fa5750505050845f5260028352835f209161019a86611621565b91855180936245512d60e81b878301526101bd8151809289602386019101611014565b810103926101d5602360039586810184520182610f50565b80519182116104e7576101f2826101ec8754610ed4565b87611192565b8590601f83116001146104815791806102259261022c95945f92610476575b50508160011b915f199060031b1c19161790565b8455611171565b51600183015560028201600160ff198254161790558351838161024f81866111e1565b8481520301902054156103fb575b8394955f9451848161026f81876111e1565b85815203019020549060018060a01b037f9e7b61f58c47dc699ac88507c4f5bb9f121c03808c5676a8078fe583e4649701868282541660448b51809b8193639cd07acb60e01b83526001898401528860248401525af19788156103f1575f986103c2575b508784156103b2575b15610394575b915f60649288959454168a51998a95869463022f65e760e31b865285015260248401528160448401525af193841561038a575f94610359575b5061032b939451938480936111e1565b90815203019020557f73bce4a7f5d228ba17e8ddbd99678a75697edac4495e90c501b7dec6c79f88155f80a2005b93508284813d8311610383575b6103708183610f50565b810103126100d95761032b93519361031b565b503d610366565b85513d5f823e3d90fd5b96508592915f6064926103a5611714565b99929495509250506102e2565b93506103bc611714565b936102dc565b9097508681813d83116103ea575b6103da8183610f50565b810103126100d95751965f6102d3565b503d6103d0565b89513d5f823e3d90fd5b610403611714565b8451848161041181876111e1565b85815203019020558554600160401b8110156104635780600161043692018855611261565b6104515795610448835f969798611296565b9594935061025d565b5f87634e487b7160e01b82525260245ffd5b604187634e487b7160e01b5f525260245ffd5b015190505f80610211565b90601f19831691865f52875f20925f5b898282106104d157505091600193918561022c979694106104ba575b505050811b018455611171565b01515f1983881b60f8161c191690555f80806104ad565b6001859682939686015181550195019301610491565b604189634e487b7160e01b5f525260245ffd5b825181529181019186910161017b565b604188634e487b7160e01b5f525260245ffd5b845162461bcd60e51b8152808801859052600f60248201526e125b9d985b1a59081c995c5d595cdd608a1b6044820152606490fd5b82346100d9575f3660031901126100d957602090516127118152f35b82346100d95761059f6105996105833661112a565b928195835f9493945260056020525f205461137a565b50611415565b6020818051810103126100d9576020015163ffffffff8116036100d957005b50346100d957602091826003193601126100d957813591825f526001808552825f20906002865260ff6002855f200154166108ab57835167ffffffffffffffff9060608101828111828210176108985786526002815260028882019487368737600181015461062c84611171565b52015481516001101561088557868201525f7f878245876662ba28a480c5ea71726db859fb50222b0a3d7cbbc21cfa336faf009485549660018060a01b03807f9e7b61f58c47dc699ac88507c4f5bb9f121c03808c5676a8078fe583e46497005416803b156100d9575f8d8c51928391637d6e912360e11b8352868301528183816106ba602482018d6116e1565b03925af1801561087b57610868575b507f9e7b61f58c47dc699ac88507c4f5bb9f121c03808c5676a8078fe583e46497025416803b1561086457838a518092633263b83b60e01b82528b858301526060602483015281838161071f606482018c6116e1565b63ec7df84760e01b604483015203925af1801561085a57908491610842575b508890527f878245876662ba28a480c5ea71726db859fb50222b0a3d7cbbc21cfa336faf01808c5289842054610833578884528b52888320935194851161082057600160401b8511610820575082548484558085106107f9575b50918152888120905b8381106107e85788808960058d8b8b6107ba8154611613565b90555f52525f20557f531122ee1c5c59235db3d128b7f66f009e770ac694e89e2ce0010044c00045a95f80a2005b8251828201559189019184016107a1565b83835285858c852092830192015b828110610815575050610798565b5f8155018690610807565b634e487b7160e01b835260419052602482fd5b508851633f06d22b60e01b8152fd5b61084b90610f0c565b61085657825f61073e565b8280fd5b8a513d86823e3d90fd5b8380fd5b610873919450610f0c565b5f925f6106c9565b8b513d5f823e3d90fd5b603286634e487b7160e01b5f525260245ffd5b604186634e487b7160e01b5f525260245ffd5b835162461bcd60e51b81528084018790526011602482015270105b1c9958591e481c1c9bd8d95cdcd959607a1b6044820152606490fd5b5090346100d957806003193601126100d95760245f5491600191828401809411610b0457835f55815192608084019067ffffffffffffffff9185811083821117610af25784528585526020946003868201893581528683018635815260608401914283528a5f52858a52885f20945185555185850155516002840155519101558351916060830183811082821117610ae0576080840181811083821117610ace5786525f81528352858301905f8252858401945f8652885f5260028852865f209451998a51928311610abd5750506109c4816109be8654610ed4565b86611192565b86601f8211600114610a385781600295949392610a18927f8e02165c32e3fe774a93d7f62c2ba5fb32479a920c28e338092644bfbafd60939b9c5f926104765750508160011b915f199060031b1c19161790565b83555b5190820155019051151560ff8019835416911617905551428152a2005b601f19821690855f52885f20915f5b818110610aa857509183917f8e02165c32e3fe774a93d7f62c2ba5fb32479a920c28e338092644bfbafd60939b9c879695600299989510610a90575b505050811b018355610a1b565b01515f1960f88460031b161c191690555f8080610a83565b8c830151845592860192918a01918a01610a47565b604190634e487b7160e01b5f52525ffd5b8560418b634e487b7160e01b5f52525ffd5b8460418a634e487b7160e01b5f52525ffd5b83604189634e487b7160e01b5f52525ffd5b634e487b7160e01b5f90815260118652fd5b5090346100d95760203660031901126100d957608091355f526001602052805f20908154916001810154916003600283015492015492815194855260208501528301526060820152f35b5090346100d957610b70366110d0565b9080518251602091828181870193610b89818387611014565b8101600381520301902054938415610df9578351610ba681610f34565b600196600182528482019685368937610bbe83611171565b525f917f878245876662ba28a480c5ea71726db859fb50222b0a3d7cbbc21cfa336faf009283549860018060a01b03807f9e7b61f58c47dc699ac88507c4f5bb9f121c03808c5676a8078fe583e46497005416803b156100d9575f8b518092637d6e912360e11b82528c89830152818381610c3c602482018c6116e1565b03925af1801561087b57610de6575b507f9e7b61f58c47dc699ac88507c4f5bb9f121c03808c5676a8078fe583e46497025416803b1561085657828a518092633263b83b60e01b82528d8883015260606024830152818381610ca1606482018b6116e1565b630cadcfc360e41b604483015203925af18015610ddc57908391610dc4575b508a90527f878245876662ba28a480c5ea71726db859fb50222b0a3d7cbbc21cfa336faf0180895289832054610db4578a8352885288822092519367ffffffffffffffff851161082057600160401b851161082057508254848455808510610d8d575b50918152868120905b838110610d7c57898960058a8a8a8a610d458154611613565b9055610d6e8386518093610d6183830196879251928391611014565b8101038084520182610f50565b519020935f52525f20555f80f35b825182820155918701918a01610d2c565b8383528b858a852092830192015b828110610da9575050610d23565b5f8155018c90610d9b565b8951633f06d22b60e01b81528590fd5b610dcd90610f0c565b610dd857815f610cc0565b5080fd5b8a513d85823e3d90fd5b610df1919350610f0c565b5f915f610c4b565b835162461bcd60e51b8152602081880181815260139181019190915272115c5d5a5c1b595b9d081b9bdd08199bdd5b99606a1b604082015281906060010390fd5b82346100d9575f3660031901126100d9576020905f549051908152f35b82346100d957602090610e7f82610e6d366110d0565b81845193828580945193849201611014565b81016003815203019020549051908152f35b50346100d95760203660031901126100d957355f526002602052805f20906100d5610ebb83610f72565b9160ff600260018601549501541690519384938461105a565b90600182811c92168015610f02575b6020831014610eee57565b634e487b7160e01b5f52602260045260245ffd5b91607f1691610ee3565b67ffffffffffffffff8111610f2057604052565b634e487b7160e01b5f52604160045260245ffd5b6040810190811067ffffffffffffffff821117610f2057604052565b90601f8019910116810190811067ffffffffffffffff821117610f2057604052565b9060405191825f8254610f8481610ed4565b908184526020946001916001811690815f14610ff25750600114610fb4575b505050610fb292500383610f50565b565b5f90815285812095935091905b818310610fda575050610fb293508201015f8080610fa3565b85548884018501529485019487945091830191610fc1565b92505050610fb294925060ff191682840152151560051b8201015f8080610fa3565b5f5b8381106110255750505f910152565b8181015183820152602001611016565b9060209161104e81518092818552858086019101611014565b601f01601f1916010190565b919392611071604092606085526060850190611035565b9460208401521515910152565b67ffffffffffffffff8111610f2057601f01601f191660200190565b9291926110a68261107e565b916110b46040519384610f50565b8294818452818301116100d9578281602093845f960137010152565b60206003198201126100d9576004359067ffffffffffffffff82116100d957806023830112156100d95781602461110c9360040135910161109a565b90565b9080601f830112156100d95781602061110c9335910161109a565b60606003198201126100d9576004359167ffffffffffffffff6024358181116100d9578361115a9160040161110f565b926044359182116100d95761110c9160040161110f565b80511561117e5760200190565b634e487b7160e01b5f52603260045260245ffd5b601f821161119f57505050565b5f5260205f20906020601f840160051c830193106111d7575b601f0160051c01905b8181106111cc575050565b5f81556001016111c1565b90915081906111b8565b5f929181546111ef81610ed4565b92600191808316908115611246575060011461120c575b50505050565b9091929394505f5260209060205f20905f915b858310611235575050505001905f808080611206565b80548584015291830191810161121f565b60ff191684525050508115159091020191505f808080611206565b60045481101561117e5760045f527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b01905f90565b90808214611376576112a88154610ed4565b9067ffffffffffffffff8211610f20576112cc826112c68554610ed4565b85611192565b5f90601f8311600114611308576112f992915f91836112fd5750508160011b915f199060031b1c19161790565b9055565b015490505f80610211565b90601f198316915f5260209160205f2090855f5260205f20935f905b82821061135d575050908460019594939210611345575b505050811b019055565b01545f1960f88460031b161c191690555f808061133b565b8495819295850154815560018091019601940190611324565b5050565b600454905f5b8281106113c25760405162461bcd60e51b8152602060048201526013602482015272115c5d5a5c1b595b9d081b9bdd08199bdd5b99606a1b6044820152606490fd5b816113cc82611261565b506040516113f0816113e26020820180956111e1565b03601f198101835282610f50565b5190201461140057600101611380565b61110c925061140f9150611261565b50610f72565b9190825f527f878245876662ba28a480c5ea71726db859fb50222b0a3d7cbbc21cfa336faf0191602091838352604093845f20541561160257855f528352835f209084518083868295549384815201905f52865f20925f5b888282106115ec5750505061148492500383610f50565b8051808501908186116115d85786018091116115d8576115255f86946114d38961153896815196816114bf89935180928d8087019101611014565b8201908a8201520388810187520185610f50565b61154760018060a01b037f9e7b61f58c47dc699ac88507c4f5bb9f121c03808c5676a8078fe583e46497035416948a51988997889687956378542ead60e01b87526060600488015260648701906116e1565b6003199384878303016024880152611035565b91848303016044850152611035565b03925af19182156115ce575f92611597575b50501561158757507f1af0453083661051f6e56e5c070792320652e612154bf9af8637bb1e7655b99d5f80a2565b5163cf6c44e960e01b8152600490fd5b90809250813d83116115c7575b6115ae8183610f50565b810103126100d9575180151581036100d9575f80611559565b503d6115a4565b83513d5f823e3d90fd5b634e487b7160e01b5f52601160045260245ffd5b855484526001958601958895509301920161146d565b845163d66ca67560e01b8152600490fd5b5f1981146115d85760010190565b80156116c3575f81805b6116af57506116398161107e565b906116476040519283610f50565b808252601f196116568261107e565b01366020840137915b829080156116a857600a9160309483830686018096116115d85780156115d8575f190194845186101561117e5760f81b6001600160f81b0319165f1a908401601f01530461165f565b5050905090565b906116bb600a91611613565b91048061162b565b506040516116d081610f34565b60018152600360fc1b602082015290565b9081518082526020808093019301915f5b828110611700575050505090565b8351855293810193928101926001016116f2565b7f9e7b61f58c47dc699ac88507c4f5bb9f121c03808c5676a8078fe583e464970154604051639cd07acb60e01b81525f600480830182905260248301529091602091839160449183916001600160a01b03165af19081156117a8575f91611779575090565b90506020813d6020116117a0575b8161179460209383610f50565b810103126100d9575190565b3d9150611787565b6040513d5f823e3d90fdfea164736f6c6343000818000a";

type FHEPowerMaintenanceConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: FHEPowerMaintenanceConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class FHEPowerMaintenance__factory extends ContractFactory {
  constructor(...args: FHEPowerMaintenanceConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      FHEPowerMaintenance & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(
    runner: ContractRunner | null
  ): FHEPowerMaintenance__factory {
    return super.connect(runner) as FHEPowerMaintenance__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): FHEPowerMaintenanceInterface {
    return new Interface(_abi) as FHEPowerMaintenanceInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): FHEPowerMaintenance {
    return new Contract(
      address,
      _abi,
      runner
    ) as unknown as FHEPowerMaintenance;
  }
}
