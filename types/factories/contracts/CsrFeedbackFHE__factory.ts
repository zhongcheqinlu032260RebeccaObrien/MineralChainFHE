/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../common";
import type {
  CsrFeedbackFHE,
  CsrFeedbackFHEInterface,
} from "../../contracts/CsrFeedbackFHE";

const _abi = [
  {
    inputs: [],
    name: "HandlesAlreadySavedForRequestID",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidKMSSignatures",
    type: "error",
  },
  {
    inputs: [],
    name: "NoHandleFoundForRequestID",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "requestID",
        type: "uint256",
      },
    ],
    name: "DecryptionFulfilled",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "feedbackId",
        type: "uint256",
      },
    ],
    name: "DecryptionRequested",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "feedbackId",
        type: "uint256",
      },
    ],
    name: "FeedbackDecrypted",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "feedbackId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "timestamp",
        type: "uint256",
      },
    ],
    name: "FeedbackSubmitted",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "requestId",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "cleartexts",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "proof",
        type: "bytes",
      },
    ],
    name: "decryptFeedback",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "requestId",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "cleartexts",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "proof",
        type: "bytes",
      },
    ],
    name: "decryptScoreCount",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "decryptedFeedbacks",
    outputs: [
      {
        internalType: "string",
        name: "score",
        type: "string",
      },
      {
        internalType: "string",
        name: "comment",
        type: "string",
      },
      {
        internalType: "bool",
        name: "isRevealed",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "encryptedFeedbacks",
    outputs: [
      {
        internalType: "uint256",
        name: "feedbackId",
        type: "uint256",
      },
      {
        internalType: "euint32",
        name: "encryptedScore",
        type: "bytes32",
      },
      {
        internalType: "euint32",
        name: "encryptedComment",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "timestamp",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "feedbackCount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "feedbackId",
        type: "uint256",
      },
    ],
    name: "getDecryptedFeedback",
    outputs: [
      {
        internalType: "string",
        name: "score",
        type: "string",
      },
      {
        internalType: "string",
        name: "comment",
        type: "string",
      },
      {
        internalType: "bool",
        name: "isRevealed",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "score",
        type: "string",
      },
    ],
    name: "getEncryptedScoreCount",
    outputs: [
      {
        internalType: "euint32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "protocolId",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "feedbackId",
        type: "uint256",
      },
    ],
    name: "requestFeedbackDecryption",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "score",
        type: "string",
      },
    ],
    name: "requestScoreCountDecryption",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "euint32",
        name: "encryptedScore",
        type: "bytes32",
      },
      {
        internalType: "euint32",
        name: "encryptedComment",
        type: "bytes32",
      },
    ],
    name: "submitEncryptedFeedback",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234610154575f6060610014610158565b828152826020820152826040820152015261002d610158565b606073687820221192c5b662b25367f70076a37bc79b6c9182815273848b0066793bcc60346da1f49049357399b8d59580602083015273a02cda4ca3a71d7c46997716f4283aa851c2881291826040820152731364cbbf2cdf5032c47d8226a6f6fbd2afcdacac938491015260018060a01b0319937f9e7b61f58c47dc699ac88507c4f5bb9f121c03808c5676a8078fe583e464970090858254161790557f9e7b61f58c47dc699ac88507c4f5bb9f121c03808c5676a8078fe583e464970190848254161790557f9e7b61f58c47dc699ac88507c4f5bb9f121c03808c5676a8078fe583e464970290838254161790557f9e7b61f58c47dc699ac88507c4f5bb9f121c03808c5676a8078fe583e4649703918254161790556040516115be908161018c8239f35b5f80fd5b60405190608082016001600160401b0381118382101761017757604052565b634e487b7160e01b5f52604160045260245ffdfe60406080815260049081361015610014575f80fd5b5f3560e01c806308fd29cf14610d00578063184ebe7d14610cc65780632ed3f65b14610ca957806348fae3c31461099657806356a064d71461085257806367587c2c146108055780637ad0db1f1461044c5780638a78d7221461014d5780639e680031146100fd578063da1f12ab146100e15763e46df68a14610095575f80fd5b346100dd5760203660031901126100dd57608091355f526001602052805f20908154916001810154916003600283015492015492815194855260208501528301526060820152f35b5f80fd5b50346100dd575f3660031901126100dd57602090516127118152f35b50346100dd5761012e61012861011236610faf565b928195835f9493945260056020525f20546113c8565b506111ca565b6020818051810103126100dd576020015163ffffffff8116036100dd57005b50346100dd57602090816003193601126100dd57823591825f526001808252825f20906002835261018760ff6002865f2001541615611155565b83519067ffffffffffffffff906060830182811184821017610439578652600283526002858401948736873760018101546101c18661101c565b5201546101cd8461103d565b525f917f878245876662ba28a480c5ea71726db859fb50222b0a3d7cbbc21cfa336faf009384549560018060a01b03807f9e7b61f58c47dc699ac88507c4f5bb9f121c03808c5676a8078fe583e46497005416803b156100dd578a51637d6e912360e11b8152808e018b9052905f90829081838161024e602482018b6114df565b03925af1801561042f5761041c575b507f9e7b61f58c47dc699ac88507c4f5bb9f121c03808c5676a8078fe583e46497025416803b15610418578951633263b83b60e01b8152808d018990526060602482015290869082908183816102b6606482018a6114df565b637ad0db1f60e01b604483015203925af1801561040e579086916103f6575b508790527f878245876662ba28a480c5ea71726db859fb50222b0a3d7cbbc21cfa336faf01808952898620546103e657878652885288852091519283116103d357600160401b83116103d35781548383558084106103ac575b50908452868420845b83811061039b5750505050508154905f1982146103885750918594939160016005940190555f52525f20557f692f7082be436727c1eb360ad57f2116cf8e2d16001837c08adafb7e0fa2f8f95f80a2005b634e487b7160e01b815260118852602490fd5b825182820155918801918401610337565b82865284848a882092830192015b8281106103c857505061032e565b5f81550185906103ba565b634e487b7160e01b855260418b52602485fd5b8951633f06d22b60e01b81528c90fd5b6103ff90610d83565b61040a57845f6102d5565b8480fd5b8a513d88823e3d90fd5b8580fd5b610427919650610d83565b5f945f61025d565b8b513d5f823e3d90fd5b604189634e487b7160e01b5f525260245ffd5b50346100dd5761045b36610faf565b939091805f5260209060058252845f20549586156107d057865f526002835261049a865f209186600284019461049560ff87541615611155565b6111ca565b8451850183868183019203126100dd578386015167ffffffffffffffff968782116100dd57019080603f830112156100dd5784820151968088116107bd578760051b908951986104ec8884018b610dc7565b895289878a0192850101938385116100dd578a8101925b85841061075f5750505050505061053a906105276105208761101c565b518261104d565b60016105328761103d565b51910161104d565b805460ff191660011790556105576105518461101c565b51610ff6565b54156106e7575b5f9061056c6105518561101c565b5460018060a01b037f9e7b61f58c47dc699ac88507c4f5bb9f121c03808c5676a8078fe583e4649701838282541660448a5180988193639cd07acb60e01b835260018c8401528b60248401525af19485156106dd575f956106ae575b5084831561069e575b15610683575b945f60649285969754168951978895869463022f65e760e31b865285015260248401528160448401525af193841561067a57505f93610646575b505061055161061f9161101c565b557f6f0956bcf936a369e0f8b183b3ce6bbc53bfbb78e4fb9c28bbcb93552eb9f2435f80a2005b9080929350813d8311610673575b61065e8183610dc7565b810103126100dd57519061055161061f610611565b503d610654565b513d5f823e3d90fd5b948394505f606492610693611512565b9650925050946105d7565b92506106a8611512565b926105d1565b9094508381813d83116106d6575b6106c68183610dc7565b810103126100dd5751935f6105c8565b503d6106bc565b88513d5f823e3d90fd5b6106ef611512565b6106fb6105518561101c565b556107058361101c565b518254600160401b81101561074c5780600161072392018555611195565b61073a575f92916107339161104d565b905061055e565b5f84634e487b7160e01b82525260245ffd5b604184634e487b7160e01b5f525260245ffd5b83518381116100dd57820185605f820112156100dd578c810151918d606061079261078986610f03565b92519283610dc7565b848252888186860101116100dd578c9485946107b2928685019101610e8b565b815201930192610503565b604187634e487b7160e01b5f525260245ffd5b855162461bcd60e51b8152808501849052600f60248201526e125b9d985b1a59081c995c5d595cdd608a1b6044820152606490fd5b5090346100dd5760203660031901126100dd57355f526002602052805f2061084e60ff600283015416610843600161083c85610de9565b9401610de9565b935193849384610ed1565b0390f35b50346100dd57806003193601126100dd575f54916001830180931161098357825f558151608081019067ffffffffffffffff918181108382111761074c5784528481526003602082018435815285830160243581526060840191428352885f526001602052875f209451855551600185015551600284015551910155825191606083019183831090831117610970575091602091837f8d114fdf69a1c3fb72adcb7365eadd4be664b2ce2da27ff4ef3138f616427ef294835261091481610dab565b5f81528152600282519161092783610dab565b5f8352848101928352610958848201935f8552885f5283875261094e865f2093518461104d565b516001830161104d565b019051151560ff8019835416911617905551428152a2005b604190634e487b7160e01b5f525260245ffd5b601190634e487b7160e01b5f525260245ffd5b50346100dd576109a536610f55565b90805182516020918281818701936109be818387610e8b565b8101600381520301902054938415610c6c57835167ffffffffffffffff8186018181118382101761043957865260018083528583019786368a37610a018461101c565b525f917f878245876662ba28a480c5ea71726db859fb50222b0a3d7cbbc21cfa336faf009384549960018060a01b03807f9e7b61f58c47dc699ac88507c4f5bb9f121c03808c5676a8078fe583e46497005416803b156100dd578b51637d6e912360e11b8152808f018c9052905f908290818381610a82602482018b6114df565b03925af18015610c6257610c4f575b507f9e7b61f58c47dc699ac88507c4f5bb9f121c03808c5676a8078fe583e46497025416803b15610418578a51633263b83b60e01b8152808e018d9052606060248201529086908290818381610aea606482018a6114df565b639e68003160e01b604483015203925af18015610c4557908691610c31575b508b90527f878245876662ba28a480c5ea71726db859fb50222b0a3d7cbbc21cfa336faf01808a528a862054610c21578b865289528985209151928311610c0e57600160401b8311610c0e578154838355808410610be7575b50908452878420845b838110610bd65750505050508154905f198214610bc357506005959697506001019055610bb58386518093610ba883830196879251928391610e8b565b8101038084520182610dc7565b519020935f52525f20555f80f35b634e487b7160e01b815260118952602490fd5b825182820155918901918401610b6b565b82865284848b882092830192015b828110610c03575050610b62565b5f8155018590610bf5565b634e487b7160e01b855260418c52602485fd5b8a51633f06d22b60e01b81528d90fd5b610c3a90610d83565b61040a57845f610b09565b8b513d88823e3d90fd5b610c5a919650610d83565b5f945f610a91565b8c513d5f823e3d90fd5b835162461bcd60e51b81526020818801818152600f918101919091526e14d8dbdc99481b9bdd08199bdd5b99608a1b604082015281906060010390fd5b50346100dd575f3660031901126100dd576020905f549051908152f35b50346100dd57602090610cee82610cdc36610f55565b81845193828580945193849201610e8b565b81016003815203019020549051908152f35b5090346100dd5760203660031901126100dd57355f526002602052805f209061084e610d2b83610de9565b9160ff6002610d3c60018701610de9565b95015416905193849384610ed1565b90600182811c92168015610d79575b6020831014610d6557565b634e487b7160e01b5f52602260045260245ffd5b91607f1691610d5a565b67ffffffffffffffff8111610d9757604052565b634e487b7160e01b5f52604160045260245ffd5b6020810190811067ffffffffffffffff821117610d9757604052565b90601f8019910116810190811067ffffffffffffffff821117610d9757604052565b9060405191825f8254610dfb81610d4b565b908184526020946001916001811690815f14610e695750600114610e2b575b505050610e2992500383610dc7565b565b5f90815285812095935091905b818310610e51575050610e2993508201015f8080610e1a565b85548884018501529485019487945091830191610e38565b92505050610e2994925060ff191682840152151560051b8201015f8080610e1a565b5f5b838110610e9c5750505f910152565b8181015183820152602001610e8d565b90602091610ec581518092818552858086019101610e8b565b601f01601f1916010190565b91610efb90610eed604093969596606086526060860190610eac565b908482036020860152610eac565b931515910152565b67ffffffffffffffff8111610d9757601f01601f191660200190565b929192610f2b82610f03565b91610f396040519384610dc7565b8294818452818301116100dd578281602093845f960137010152565b60206003198201126100dd576004359067ffffffffffffffff82116100dd57806023830112156100dd57816024610f9193600401359101610f1f565b90565b9080601f830112156100dd57816020610f9193359101610f1f565b60606003198201126100dd576004359167ffffffffffffffff6024358181116100dd5783610fdf91600401610f94565b926044359182116100dd57610f9191600401610f94565b602061100f918160405193828580945193849201610e8b565b8101600381520301902090565b8051156110295760200190565b634e487b7160e01b5f52603260045260245ffd5b8051600110156110295760400190565b919091825167ffffffffffffffff8111610d975761106b8254610d4b565b601f8111611110575b50602080601f83116001146110af5750819293945f926110a4575b50508160011b915f199060031b1c1916179055565b015190505f8061108f565b90601f19831695845f5260205f20925f905b8882106110f8575050836001959697106110e0575b505050811b019055565b01515f1960f88460031b161c191690555f80806110d6565b806001859682949686015181550195019301906110c1565b825f5260205f20601f830160051c8101916020841061114b575b601f0160051c01905b8181106111405750611074565b5f8155600101611133565b909150819061112a565b1561115c57565b60405162461bcd60e51b8152602060048201526011602482015270105b1c9958591e48191958dc9e5c1d1959607a1b6044820152606490fd5b6004548110156110295760045f527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b01905f90565b9190825f527f878245876662ba28a480c5ea71726db859fb50222b0a3d7cbbc21cfa336faf0191602091838352604093845f2054156113b757855f528352835f209084518083868295549384815201905f52865f20925f5b888282106113a15750505061123992500383610dc7565b80518085019081861161138d57860180911161138d576112da5f8694611288896112ed968151968161127489935180928d8087019101610e8b565b8201908a8201520388810187520185610dc7565b6112fc60018060a01b037f9e7b61f58c47dc699ac88507c4f5bb9f121c03808c5676a8078fe583e46497035416948a51988997889687956378542ead60e01b87526060600488015260648701906114df565b6003199384878303016024880152610eac565b91848303016044850152610eac565b03925af1918215611383575f9261134c575b50501561133c57507f1af0453083661051f6e56e5c070792320652e612154bf9af8637bb1e7655b99d5f80a2565b5163cf6c44e960e01b8152600490fd5b90809250813d831161137c575b6113638183610dc7565b810103126100dd575180151581036100dd575f8061130e565b503d611359565b83513d5f823e3d90fd5b634e487b7160e01b5f52601160045260245ffd5b8554845260019586019588955093019201611222565b845163d66ca67560e01b8152600490fd5b600454905f5b82811061140c5760405162461bcd60e51b815260206004820152600f60248201526e14d8dbdc99481b9bdd08199bdd5b99608a1b6044820152606490fd5b8161141682611195565b5060405181546020808301935f9261142d81610d4b565b916001918683821691825f146114be575050600114611483575b505050508161145e9103601f198101835282610dc7565b5190201461146e576001016113ce565b610f91925061147d9150611195565b50610de9565b5f90815283812093945091925b8383106114a8575050508201018161145e5f80611447565b8054838701860152899750918401918101611490565b9250949392505061145e945060ff1916865280151502820101915f80611447565b9081518082526020808093019301915f5b8281106114fe575050505090565b8351855293810193928101926001016114f0565b7f9e7b61f58c47dc699ac88507c4f5bb9f121c03808c5676a8078fe583e464970154604051639cd07acb60e01b81525f600480830182905260248301529091602091839160449183916001600160a01b03165af19081156115a6575f91611577575090565b90506020813d60201161159e575b8161159260209383610dc7565b810103126100dd575190565b3d9150611585565b6040513d5f823e3d90fdfea164736f6c6343000818000a";

type CsrFeedbackFHEConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: CsrFeedbackFHEConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class CsrFeedbackFHE__factory extends ContractFactory {
  constructor(...args: CsrFeedbackFHEConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      CsrFeedbackFHE & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): CsrFeedbackFHE__factory {
    return super.connect(runner) as CsrFeedbackFHE__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CsrFeedbackFHEInterface {
    return new Interface(_abi) as CsrFeedbackFHEInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): CsrFeedbackFHE {
    return new Contract(address, _abi, runner) as unknown as CsrFeedbackFHE;
  }
}
