/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface VeterinaryFHERecordNetworkInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "encryptedRecords"
      | "getRevealedRecord"
      | "handleAggregateDecryption"
      | "handleDecryption"
      | "protocolId"
      | "recordCounter"
      | "requestAggregateDecryption"
      | "requestRecordDecryption"
      | "revealedRecords"
      | "submitEncryptedMedicalRecord"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "DecryptionFulfilled"
      | "DecryptionRequested"
      | "RecordRevealed"
      | "RecordSubmitted"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "encryptedRecords",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRevealedRecord",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "handleAggregateDecryption",
    values: [BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "handleDecryption",
    values: [BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "protocolId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "recordCounter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requestAggregateDecryption",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "requestRecordDecryption",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "revealedRecords",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "submitEncryptedMedicalRecord",
    values: [BytesLike, BytesLike, BytesLike, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "encryptedRecords",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRevealedRecord",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "handleAggregateDecryption",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "handleDecryption",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "protocolId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "recordCounter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestAggregateDecryption",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestRecordDecryption",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revealedRecords",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitEncryptedMedicalRecord",
    data: BytesLike
  ): Result;
}

export namespace DecryptionFulfilledEvent {
  export type InputTuple = [requestID: BigNumberish];
  export type OutputTuple = [requestID: bigint];
  export interface OutputObject {
    requestID: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DecryptionRequestedEvent {
  export type InputTuple = [uid: BigNumberish, requestId: BigNumberish];
  export type OutputTuple = [uid: bigint, requestId: bigint];
  export interface OutputObject {
    uid: bigint;
    requestId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RecordRevealedEvent {
  export type InputTuple = [uid: BigNumberish];
  export type OutputTuple = [uid: bigint];
  export interface OutputObject {
    uid: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RecordSubmittedEvent {
  export type InputTuple = [uid: BigNumberish, timestamp: BigNumberish];
  export type OutputTuple = [uid: bigint, timestamp: bigint];
  export interface OutputObject {
    uid: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface VeterinaryFHERecordNetwork extends BaseContract {
  connect(runner?: ContractRunner | null): VeterinaryFHERecordNetwork;
  waitForDeployment(): Promise<this>;

  interface: VeterinaryFHERecordNetworkInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  encryptedRecords: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, string, string, string, bigint] & {
        uid: bigint;
        encryptedSpecies: string;
        encryptedBreed: string;
        encryptedSymptoms: string;
        encryptedOwnerMeta: string;
        timestamp: bigint;
      }
    ],
    "view"
  >;

  getRevealedRecord: TypedContractMethod<
    [recordId: BigNumberish],
    [
      [string, string, string, boolean] & {
        species: string;
        breed: string;
        symptoms: string;
        revealed: boolean;
      }
    ],
    "view"
  >;

  handleAggregateDecryption: TypedContractMethod<
    [requestId: BigNumberish, cleartexts: BytesLike, proof: BytesLike],
    [void],
    "nonpayable"
  >;

  handleDecryption: TypedContractMethod<
    [requestId: BigNumberish, cleartexts: BytesLike, proof: BytesLike],
    [void],
    "nonpayable"
  >;

  protocolId: TypedContractMethod<[], [bigint], "view">;

  recordCounter: TypedContractMethod<[], [bigint], "view">;

  requestAggregateDecryption: TypedContractMethod<
    [label: string],
    [void],
    "nonpayable"
  >;

  requestRecordDecryption: TypedContractMethod<
    [recordId: BigNumberish],
    [void],
    "nonpayable"
  >;

  revealedRecords: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, string, boolean] & {
        species: string;
        breed: string;
        symptoms: string;
        revealed: boolean;
      }
    ],
    "view"
  >;

  submitEncryptedMedicalRecord: TypedContractMethod<
    [
      encryptedSpecies: BytesLike,
      encryptedBreed: BytesLike,
      encryptedSymptoms: BytesLike,
      encryptedOwnerMeta: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "encryptedRecords"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, string, string, string, bigint] & {
        uid: bigint;
        encryptedSpecies: string;
        encryptedBreed: string;
        encryptedSymptoms: string;
        encryptedOwnerMeta: string;
        timestamp: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRevealedRecord"
  ): TypedContractMethod<
    [recordId: BigNumberish],
    [
      [string, string, string, boolean] & {
        species: string;
        breed: string;
        symptoms: string;
        revealed: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "handleAggregateDecryption"
  ): TypedContractMethod<
    [requestId: BigNumberish, cleartexts: BytesLike, proof: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "handleDecryption"
  ): TypedContractMethod<
    [requestId: BigNumberish, cleartexts: BytesLike, proof: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "protocolId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "recordCounter"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "requestAggregateDecryption"
  ): TypedContractMethod<[label: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "requestRecordDecryption"
  ): TypedContractMethod<[recordId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "revealedRecords"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, string, boolean] & {
        species: string;
        breed: string;
        symptoms: string;
        revealed: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "submitEncryptedMedicalRecord"
  ): TypedContractMethod<
    [
      encryptedSpecies: BytesLike,
      encryptedBreed: BytesLike,
      encryptedSymptoms: BytesLike,
      encryptedOwnerMeta: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "DecryptionFulfilled"
  ): TypedContractEvent<
    DecryptionFulfilledEvent.InputTuple,
    DecryptionFulfilledEvent.OutputTuple,
    DecryptionFulfilledEvent.OutputObject
  >;
  getEvent(
    key: "DecryptionRequested"
  ): TypedContractEvent<
    DecryptionRequestedEvent.InputTuple,
    DecryptionRequestedEvent.OutputTuple,
    DecryptionRequestedEvent.OutputObject
  >;
  getEvent(
    key: "RecordRevealed"
  ): TypedContractEvent<
    RecordRevealedEvent.InputTuple,
    RecordRevealedEvent.OutputTuple,
    RecordRevealedEvent.OutputObject
  >;
  getEvent(
    key: "RecordSubmitted"
  ): TypedContractEvent<
    RecordSubmittedEvent.InputTuple,
    RecordSubmittedEvent.OutputTuple,
    RecordSubmittedEvent.OutputObject
  >;

  filters: {
    "DecryptionFulfilled(uint256)": TypedContractEvent<
      DecryptionFulfilledEvent.InputTuple,
      DecryptionFulfilledEvent.OutputTuple,
      DecryptionFulfilledEvent.OutputObject
    >;
    DecryptionFulfilled: TypedContractEvent<
      DecryptionFulfilledEvent.InputTuple,
      DecryptionFulfilledEvent.OutputTuple,
      DecryptionFulfilledEvent.OutputObject
    >;

    "DecryptionRequested(uint256,uint256)": TypedContractEvent<
      DecryptionRequestedEvent.InputTuple,
      DecryptionRequestedEvent.OutputTuple,
      DecryptionRequestedEvent.OutputObject
    >;
    DecryptionRequested: TypedContractEvent<
      DecryptionRequestedEvent.InputTuple,
      DecryptionRequestedEvent.OutputTuple,
      DecryptionRequestedEvent.OutputObject
    >;

    "RecordRevealed(uint256)": TypedContractEvent<
      RecordRevealedEvent.InputTuple,
      RecordRevealedEvent.OutputTuple,
      RecordRevealedEvent.OutputObject
    >;
    RecordRevealed: TypedContractEvent<
      RecordRevealedEvent.InputTuple,
      RecordRevealedEvent.OutputTuple,
      RecordRevealedEvent.OutputObject
    >;

    "RecordSubmitted(uint256,uint256)": TypedContractEvent<
      RecordSubmittedEvent.InputTuple,
      RecordSubmittedEvent.OutputTuple,
      RecordSubmittedEvent.OutputObject
    >;
    RecordSubmitted: TypedContractEvent<
      RecordSubmittedEvent.InputTuple,
      RecordSubmittedEvent.OutputTuple,
      RecordSubmittedEvent.OutputObject
    >;
  };
}
