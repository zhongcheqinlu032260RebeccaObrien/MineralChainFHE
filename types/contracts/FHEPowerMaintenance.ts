/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface FHEPowerMaintenanceInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "dataCount"
      | "decryptEquipmentCount"
      | "encryptedData"
      | "getEncryptedEquipmentCount"
      | "getPrediction"
      | "predictions"
      | "processPrediction"
      | "protocolId"
      | "requestEquipmentCountDecryption"
      | "requestPrediction"
      | "submitEncryptedSensorData"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "DataSubmitted"
      | "DecryptionFulfilled"
      | "PredictionProcessed"
      | "PredictionRequested"
  ): EventFragment;

  encodeFunctionData(functionFragment: "dataCount", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decryptEquipmentCount",
    values: [BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "encryptedData",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getEncryptedEquipmentCount",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getPrediction",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "predictions",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "processPrediction",
    values: [BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "protocolId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requestEquipmentCountDecryption",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "requestPrediction",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "submitEncryptedSensorData",
    values: [BytesLike, BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "dataCount", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decryptEquipmentCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "encryptedData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEncryptedEquipmentCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPrediction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "predictions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "processPrediction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "protocolId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "requestEquipmentCountDecryption",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestPrediction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitEncryptedSensorData",
    data: BytesLike
  ): Result;
}

export namespace DataSubmittedEvent {
  export type InputTuple = [id: BigNumberish, timestamp: BigNumberish];
  export type OutputTuple = [id: bigint, timestamp: bigint];
  export interface OutputObject {
    id: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DecryptionFulfilledEvent {
  export type InputTuple = [requestID: BigNumberish];
  export type OutputTuple = [requestID: bigint];
  export interface OutputObject {
    requestID: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PredictionProcessedEvent {
  export type InputTuple = [id: BigNumberish];
  export type OutputTuple = [id: bigint];
  export interface OutputObject {
    id: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PredictionRequestedEvent {
  export type InputTuple = [id: BigNumberish];
  export type OutputTuple = [id: bigint];
  export interface OutputObject {
    id: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface FHEPowerMaintenance extends BaseContract {
  connect(runner?: ContractRunner | null): FHEPowerMaintenance;
  waitForDeployment(): Promise<this>;

  interface: FHEPowerMaintenanceInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  dataCount: TypedContractMethod<[], [bigint], "view">;

  decryptEquipmentCount: TypedContractMethod<
    [requestId: BigNumberish, cleartexts: BytesLike, proof: BytesLike],
    [void],
    "nonpayable"
  >;

  encryptedData: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, string, bigint] & {
        id: bigint;
        encryptedTemperature: string;
        encryptedVibration: string;
        timestamp: bigint;
      }
    ],
    "view"
  >;

  getEncryptedEquipmentCount: TypedContractMethod<
    [equipmentId: string],
    [string],
    "view"
  >;

  getPrediction: TypedContractMethod<
    [dataId: BigNumberish],
    [
      [string, bigint, boolean] & {
        equipmentId: string;
        predictedRUL: bigint;
        isProcessed: boolean;
      }
    ],
    "view"
  >;

  predictions: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, boolean] & {
        equipmentId: string;
        predictedRUL: bigint;
        isProcessed: boolean;
      }
    ],
    "view"
  >;

  processPrediction: TypedContractMethod<
    [requestId: BigNumberish, cleartexts: BytesLike, proof: BytesLike],
    [void],
    "nonpayable"
  >;

  protocolId: TypedContractMethod<[], [bigint], "view">;

  requestEquipmentCountDecryption: TypedContractMethod<
    [equipmentId: string],
    [void],
    "nonpayable"
  >;

  requestPrediction: TypedContractMethod<
    [dataId: BigNumberish],
    [void],
    "nonpayable"
  >;

  submitEncryptedSensorData: TypedContractMethod<
    [encryptedTemperature: BytesLike, encryptedVibration: BytesLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "dataCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "decryptEquipmentCount"
  ): TypedContractMethod<
    [requestId: BigNumberish, cleartexts: BytesLike, proof: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "encryptedData"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, string, bigint] & {
        id: bigint;
        encryptedTemperature: string;
        encryptedVibration: string;
        timestamp: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getEncryptedEquipmentCount"
  ): TypedContractMethod<[equipmentId: string], [string], "view">;
  getFunction(
    nameOrSignature: "getPrediction"
  ): TypedContractMethod<
    [dataId: BigNumberish],
    [
      [string, bigint, boolean] & {
        equipmentId: string;
        predictedRUL: bigint;
        isProcessed: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "predictions"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, boolean] & {
        equipmentId: string;
        predictedRUL: bigint;
        isProcessed: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "processPrediction"
  ): TypedContractMethod<
    [requestId: BigNumberish, cleartexts: BytesLike, proof: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "protocolId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "requestEquipmentCountDecryption"
  ): TypedContractMethod<[equipmentId: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "requestPrediction"
  ): TypedContractMethod<[dataId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "submitEncryptedSensorData"
  ): TypedContractMethod<
    [encryptedTemperature: BytesLike, encryptedVibration: BytesLike],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "DataSubmitted"
  ): TypedContractEvent<
    DataSubmittedEvent.InputTuple,
    DataSubmittedEvent.OutputTuple,
    DataSubmittedEvent.OutputObject
  >;
  getEvent(
    key: "DecryptionFulfilled"
  ): TypedContractEvent<
    DecryptionFulfilledEvent.InputTuple,
    DecryptionFulfilledEvent.OutputTuple,
    DecryptionFulfilledEvent.OutputObject
  >;
  getEvent(
    key: "PredictionProcessed"
  ): TypedContractEvent<
    PredictionProcessedEvent.InputTuple,
    PredictionProcessedEvent.OutputTuple,
    PredictionProcessedEvent.OutputObject
  >;
  getEvent(
    key: "PredictionRequested"
  ): TypedContractEvent<
    PredictionRequestedEvent.InputTuple,
    PredictionRequestedEvent.OutputTuple,
    PredictionRequestedEvent.OutputObject
  >;

  filters: {
    "DataSubmitted(uint256,uint256)": TypedContractEvent<
      DataSubmittedEvent.InputTuple,
      DataSubmittedEvent.OutputTuple,
      DataSubmittedEvent.OutputObject
    >;
    DataSubmitted: TypedContractEvent<
      DataSubmittedEvent.InputTuple,
      DataSubmittedEvent.OutputTuple,
      DataSubmittedEvent.OutputObject
    >;

    "DecryptionFulfilled(uint256)": TypedContractEvent<
      DecryptionFulfilledEvent.InputTuple,
      DecryptionFulfilledEvent.OutputTuple,
      DecryptionFulfilledEvent.OutputObject
    >;
    DecryptionFulfilled: TypedContractEvent<
      DecryptionFulfilledEvent.InputTuple,
      DecryptionFulfilledEvent.OutputTuple,
      DecryptionFulfilledEvent.OutputObject
    >;

    "PredictionProcessed(uint256)": TypedContractEvent<
      PredictionProcessedEvent.InputTuple,
      PredictionProcessedEvent.OutputTuple,
      PredictionProcessedEvent.OutputObject
    >;
    PredictionProcessed: TypedContractEvent<
      PredictionProcessedEvent.InputTuple,
      PredictionProcessedEvent.OutputTuple,
      PredictionProcessedEvent.OutputObject
    >;

    "PredictionRequested(uint256)": TypedContractEvent<
      PredictionRequestedEvent.InputTuple,
      PredictionRequestedEvent.OutputTuple,
      PredictionRequestedEvent.OutputObject
    >;
    PredictionRequested: TypedContractEvent<
      PredictionRequestedEvent.InputTuple,
      PredictionRequestedEvent.OutputTuple,
      PredictionRequestedEvent.OutputObject
    >;
  };
}
