/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface SecureFederatedDatabaseInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addEncryptedRecord"
      | "decryptedRecords"
      | "encryptedRecords"
      | "handleDecryption"
      | "handleFieldCountDecryption"
      | "protocolId"
      | "recordCounter"
      | "requestFieldCountDecryption"
      | "requestRecordDecryption"
      | "viewDecryptedRecord"
      | "viewEncryptedFieldCount"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "DecryptionFulfilled"
      | "DecryptionRequested"
      | "RecordAdded"
      | "RecordDecrypted"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addEncryptedRecord",
    values: [BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "decryptedRecords",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "encryptedRecords",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "handleDecryption",
    values: [BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "handleFieldCountDecryption",
    values: [BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "protocolId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "recordCounter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requestFieldCountDecryption",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "requestRecordDecryption",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "viewDecryptedRecord",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "viewEncryptedFieldCount",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "addEncryptedRecord",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decryptedRecords",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "encryptedRecords",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "handleDecryption",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "handleFieldCountDecryption",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "protocolId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "recordCounter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestFieldCountDecryption",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestRecordDecryption",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "viewDecryptedRecord",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "viewEncryptedFieldCount",
    data: BytesLike
  ): Result;
}

export namespace DecryptionFulfilledEvent {
  export type InputTuple = [requestID: BigNumberish];
  export type OutputTuple = [requestID: bigint];
  export interface OutputObject {
    requestID: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DecryptionRequestedEvent {
  export type InputTuple = [id: BigNumberish];
  export type OutputTuple = [id: bigint];
  export interface OutputObject {
    id: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RecordAddedEvent {
  export type InputTuple = [id: BigNumberish, timestamp: BigNumberish];
  export type OutputTuple = [id: bigint, timestamp: bigint];
  export interface OutputObject {
    id: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RecordDecryptedEvent {
  export type InputTuple = [id: BigNumberish];
  export type OutputTuple = [id: bigint];
  export interface OutputObject {
    id: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface SecureFederatedDatabase extends BaseContract {
  connect(runner?: ContractRunner | null): SecureFederatedDatabase;
  waitForDeployment(): Promise<this>;

  interface: SecureFederatedDatabaseInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addEncryptedRecord: TypedContractMethod<
    [
      encryptedField1: BytesLike,
      encryptedField2: BytesLike,
      encryptedField3: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  decryptedRecords: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, string, boolean] & {
        field1: string;
        field2: string;
        field3: string;
        isRevealed: boolean;
      }
    ],
    "view"
  >;

  encryptedRecords: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, string, string, bigint] & {
        id: bigint;
        encryptedField1: string;
        encryptedField2: string;
        encryptedField3: string;
        timestamp: bigint;
      }
    ],
    "view"
  >;

  handleDecryption: TypedContractMethod<
    [requestId: BigNumberish, cleartexts: BytesLike, proof: BytesLike],
    [void],
    "nonpayable"
  >;

  handleFieldCountDecryption: TypedContractMethod<
    [requestId: BigNumberish, cleartexts: BytesLike, proof: BytesLike],
    [void],
    "nonpayable"
  >;

  protocolId: TypedContractMethod<[], [bigint], "view">;

  recordCounter: TypedContractMethod<[], [bigint], "view">;

  requestFieldCountDecryption: TypedContractMethod<
    [field: string],
    [void],
    "nonpayable"
  >;

  requestRecordDecryption: TypedContractMethod<
    [recordId: BigNumberish],
    [void],
    "nonpayable"
  >;

  viewDecryptedRecord: TypedContractMethod<
    [recordId: BigNumberish],
    [
      [string, string, string, boolean] & {
        field1: string;
        field2: string;
        field3: string;
        isRevealed: boolean;
      }
    ],
    "view"
  >;

  viewEncryptedFieldCount: TypedContractMethod<
    [field: string],
    [string],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addEncryptedRecord"
  ): TypedContractMethod<
    [
      encryptedField1: BytesLike,
      encryptedField2: BytesLike,
      encryptedField3: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "decryptedRecords"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, string, boolean] & {
        field1: string;
        field2: string;
        field3: string;
        isRevealed: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "encryptedRecords"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, string, string, bigint] & {
        id: bigint;
        encryptedField1: string;
        encryptedField2: string;
        encryptedField3: string;
        timestamp: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "handleDecryption"
  ): TypedContractMethod<
    [requestId: BigNumberish, cleartexts: BytesLike, proof: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "handleFieldCountDecryption"
  ): TypedContractMethod<
    [requestId: BigNumberish, cleartexts: BytesLike, proof: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "protocolId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "recordCounter"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "requestFieldCountDecryption"
  ): TypedContractMethod<[field: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "requestRecordDecryption"
  ): TypedContractMethod<[recordId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "viewDecryptedRecord"
  ): TypedContractMethod<
    [recordId: BigNumberish],
    [
      [string, string, string, boolean] & {
        field1: string;
        field2: string;
        field3: string;
        isRevealed: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "viewEncryptedFieldCount"
  ): TypedContractMethod<[field: string], [string], "view">;

  getEvent(
    key: "DecryptionFulfilled"
  ): TypedContractEvent<
    DecryptionFulfilledEvent.InputTuple,
    DecryptionFulfilledEvent.OutputTuple,
    DecryptionFulfilledEvent.OutputObject
  >;
  getEvent(
    key: "DecryptionRequested"
  ): TypedContractEvent<
    DecryptionRequestedEvent.InputTuple,
    DecryptionRequestedEvent.OutputTuple,
    DecryptionRequestedEvent.OutputObject
  >;
  getEvent(
    key: "RecordAdded"
  ): TypedContractEvent<
    RecordAddedEvent.InputTuple,
    RecordAddedEvent.OutputTuple,
    RecordAddedEvent.OutputObject
  >;
  getEvent(
    key: "RecordDecrypted"
  ): TypedContractEvent<
    RecordDecryptedEvent.InputTuple,
    RecordDecryptedEvent.OutputTuple,
    RecordDecryptedEvent.OutputObject
  >;

  filters: {
    "DecryptionFulfilled(uint256)": TypedContractEvent<
      DecryptionFulfilledEvent.InputTuple,
      DecryptionFulfilledEvent.OutputTuple,
      DecryptionFulfilledEvent.OutputObject
    >;
    DecryptionFulfilled: TypedContractEvent<
      DecryptionFulfilledEvent.InputTuple,
      DecryptionFulfilledEvent.OutputTuple,
      DecryptionFulfilledEvent.OutputObject
    >;

    "DecryptionRequested(uint256)": TypedContractEvent<
      DecryptionRequestedEvent.InputTuple,
      DecryptionRequestedEvent.OutputTuple,
      DecryptionRequestedEvent.OutputObject
    >;
    DecryptionRequested: TypedContractEvent<
      DecryptionRequestedEvent.InputTuple,
      DecryptionRequestedEvent.OutputTuple,
      DecryptionRequestedEvent.OutputObject
    >;

    "RecordAdded(uint256,uint256)": TypedContractEvent<
      RecordAddedEvent.InputTuple,
      RecordAddedEvent.OutputTuple,
      RecordAddedEvent.OutputObject
    >;
    RecordAdded: TypedContractEvent<
      RecordAddedEvent.InputTuple,
      RecordAddedEvent.OutputTuple,
      RecordAddedEvent.OutputObject
    >;

    "RecordDecrypted(uint256)": TypedContractEvent<
      RecordDecryptedEvent.InputTuple,
      RecordDecryptedEvent.OutputTuple,
      RecordDecryptedEvent.OutputObject
    >;
    RecordDecrypted: TypedContractEvent<
      RecordDecryptedEvent.InputTuple,
      RecordDecryptedEvent.OutputTuple,
      RecordDecryptedEvent.OutputObject
    >;
  };
}
