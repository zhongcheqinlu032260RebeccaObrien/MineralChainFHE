/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface CuratedListsFHEInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "claimRewards"
      | "createEncryptedList"
      | "encryptedLists"
      | "getEncryptedTally"
      | "getList"
      | "listCount"
      | "onTallyDecrypted"
      | "protocolId"
      | "requestTallyDecryption"
      | "rewards"
      | "setTreasury"
      | "stakeAndVote"
      | "stakes"
      | "treasury"
      | "withdrawStake"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "DecryptionFulfilled"
      | "EncryptedListCreated"
      | "RewardClaimed"
      | "TallyDecrypted"
      | "TallyRequested"
      | "VotedWithStake"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "claimRewards",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createEncryptedList",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "encryptedLists",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getEncryptedTally",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getList",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "listCount", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "onTallyDecrypted",
    values: [BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "protocolId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requestTallyDecryption",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rewards",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setTreasury",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "stakeAndVote",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "stakes",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "treasury", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdrawStake",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "claimRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createEncryptedList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "encryptedLists",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEncryptedTally",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getList", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "listCount", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onTallyDecrypted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "protocolId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "requestTallyDecryption",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rewards", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setTreasury",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakeAndVote",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stakes", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "treasury", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawStake",
    data: BytesLike
  ): Result;
}

export namespace DecryptionFulfilledEvent {
  export type InputTuple = [requestID: BigNumberish];
  export type OutputTuple = [requestID: bigint];
  export interface OutputObject {
    requestID: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EncryptedListCreatedEvent {
  export type InputTuple = [id: BigNumberish];
  export type OutputTuple = [id: bigint];
  export interface OutputObject {
    id: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RewardClaimedEvent {
  export type InputTuple = [who: AddressLike, amount: BigNumberish];
  export type OutputTuple = [who: string, amount: bigint];
  export interface OutputObject {
    who: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TallyDecryptedEvent {
  export type InputTuple = [listId: BigNumberish, decryptedCount: BigNumberish];
  export type OutputTuple = [listId: bigint, decryptedCount: bigint];
  export interface OutputObject {
    listId: bigint;
    decryptedCount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TallyRequestedEvent {
  export type InputTuple = [listId: BigNumberish, requestId: BigNumberish];
  export type OutputTuple = [listId: bigint, requestId: bigint];
  export interface OutputObject {
    listId: bigint;
    requestId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VotedWithStakeEvent {
  export type InputTuple = [
    voter: AddressLike,
    listId: BigNumberish,
    stake: BigNumberish
  ];
  export type OutputTuple = [voter: string, listId: bigint, stake: bigint];
  export interface OutputObject {
    voter: string;
    listId: bigint;
    stake: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface CuratedListsFHE extends BaseContract {
  connect(runner?: ContractRunner | null): CuratedListsFHE;
  waitForDeployment(): Promise<this>;

  interface: CuratedListsFHEInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  claimRewards: TypedContractMethod<[], [void], "nonpayable">;

  createEncryptedList: TypedContractMethod<
    [encryptedTitle: BytesLike, encryptedItems: BytesLike],
    [void],
    "nonpayable"
  >;

  encryptedLists: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, string, string, bigint] & {
        id: bigint;
        creator: string;
        encryptedTitle: string;
        encryptedItems: string;
        createdAt: bigint;
      }
    ],
    "view"
  >;

  getEncryptedTally: TypedContractMethod<
    [listId: BigNumberish],
    [string],
    "view"
  >;

  getList: TypedContractMethod<
    [listId: BigNumberish],
    [
      [bigint, string, string, string, bigint] & {
        id: bigint;
        creator: string;
        encryptedTitle: string;
        encryptedItems: string;
        createdAt: bigint;
      }
    ],
    "view"
  >;

  listCount: TypedContractMethod<[], [bigint], "view">;

  onTallyDecrypted: TypedContractMethod<
    [requestId: BigNumberish, cleartexts: BytesLike, proof: BytesLike],
    [void],
    "nonpayable"
  >;

  protocolId: TypedContractMethod<[], [bigint], "view">;

  requestTallyDecryption: TypedContractMethod<
    [listId: BigNumberish],
    [void],
    "nonpayable"
  >;

  rewards: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  setTreasury: TypedContractMethod<
    [_treasury: AddressLike],
    [void],
    "nonpayable"
  >;

  stakeAndVote: TypedContractMethod<
    [listId: BigNumberish, encryptedVote: BytesLike],
    [void],
    "payable"
  >;

  stakes: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  treasury: TypedContractMethod<[], [string], "view">;

  withdrawStake: TypedContractMethod<
    [listId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "claimRewards"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "createEncryptedList"
  ): TypedContractMethod<
    [encryptedTitle: BytesLike, encryptedItems: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "encryptedLists"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, string, string, bigint] & {
        id: bigint;
        creator: string;
        encryptedTitle: string;
        encryptedItems: string;
        createdAt: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getEncryptedTally"
  ): TypedContractMethod<[listId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getList"
  ): TypedContractMethod<
    [listId: BigNumberish],
    [
      [bigint, string, string, string, bigint] & {
        id: bigint;
        creator: string;
        encryptedTitle: string;
        encryptedItems: string;
        createdAt: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "listCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "onTallyDecrypted"
  ): TypedContractMethod<
    [requestId: BigNumberish, cleartexts: BytesLike, proof: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "protocolId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "requestTallyDecryption"
  ): TypedContractMethod<[listId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "rewards"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "setTreasury"
  ): TypedContractMethod<[_treasury: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "stakeAndVote"
  ): TypedContractMethod<
    [listId: BigNumberish, encryptedVote: BytesLike],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "stakes"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "treasury"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "withdrawStake"
  ): TypedContractMethod<[listId: BigNumberish], [void], "nonpayable">;

  getEvent(
    key: "DecryptionFulfilled"
  ): TypedContractEvent<
    DecryptionFulfilledEvent.InputTuple,
    DecryptionFulfilledEvent.OutputTuple,
    DecryptionFulfilledEvent.OutputObject
  >;
  getEvent(
    key: "EncryptedListCreated"
  ): TypedContractEvent<
    EncryptedListCreatedEvent.InputTuple,
    EncryptedListCreatedEvent.OutputTuple,
    EncryptedListCreatedEvent.OutputObject
  >;
  getEvent(
    key: "RewardClaimed"
  ): TypedContractEvent<
    RewardClaimedEvent.InputTuple,
    RewardClaimedEvent.OutputTuple,
    RewardClaimedEvent.OutputObject
  >;
  getEvent(
    key: "TallyDecrypted"
  ): TypedContractEvent<
    TallyDecryptedEvent.InputTuple,
    TallyDecryptedEvent.OutputTuple,
    TallyDecryptedEvent.OutputObject
  >;
  getEvent(
    key: "TallyRequested"
  ): TypedContractEvent<
    TallyRequestedEvent.InputTuple,
    TallyRequestedEvent.OutputTuple,
    TallyRequestedEvent.OutputObject
  >;
  getEvent(
    key: "VotedWithStake"
  ): TypedContractEvent<
    VotedWithStakeEvent.InputTuple,
    VotedWithStakeEvent.OutputTuple,
    VotedWithStakeEvent.OutputObject
  >;

  filters: {
    "DecryptionFulfilled(uint256)": TypedContractEvent<
      DecryptionFulfilledEvent.InputTuple,
      DecryptionFulfilledEvent.OutputTuple,
      DecryptionFulfilledEvent.OutputObject
    >;
    DecryptionFulfilled: TypedContractEvent<
      DecryptionFulfilledEvent.InputTuple,
      DecryptionFulfilledEvent.OutputTuple,
      DecryptionFulfilledEvent.OutputObject
    >;

    "EncryptedListCreated(uint256)": TypedContractEvent<
      EncryptedListCreatedEvent.InputTuple,
      EncryptedListCreatedEvent.OutputTuple,
      EncryptedListCreatedEvent.OutputObject
    >;
    EncryptedListCreated: TypedContractEvent<
      EncryptedListCreatedEvent.InputTuple,
      EncryptedListCreatedEvent.OutputTuple,
      EncryptedListCreatedEvent.OutputObject
    >;

    "RewardClaimed(address,uint256)": TypedContractEvent<
      RewardClaimedEvent.InputTuple,
      RewardClaimedEvent.OutputTuple,
      RewardClaimedEvent.OutputObject
    >;
    RewardClaimed: TypedContractEvent<
      RewardClaimedEvent.InputTuple,
      RewardClaimedEvent.OutputTuple,
      RewardClaimedEvent.OutputObject
    >;

    "TallyDecrypted(uint256,uint256)": TypedContractEvent<
      TallyDecryptedEvent.InputTuple,
      TallyDecryptedEvent.OutputTuple,
      TallyDecryptedEvent.OutputObject
    >;
    TallyDecrypted: TypedContractEvent<
      TallyDecryptedEvent.InputTuple,
      TallyDecryptedEvent.OutputTuple,
      TallyDecryptedEvent.OutputObject
    >;

    "TallyRequested(uint256,uint256)": TypedContractEvent<
      TallyRequestedEvent.InputTuple,
      TallyRequestedEvent.OutputTuple,
      TallyRequestedEvent.OutputObject
    >;
    TallyRequested: TypedContractEvent<
      TallyRequestedEvent.InputTuple,
      TallyRequestedEvent.OutputTuple,
      TallyRequestedEvent.OutputObject
    >;

    "VotedWithStake(address,uint256,uint256)": TypedContractEvent<
      VotedWithStakeEvent.InputTuple,
      VotedWithStakeEvent.OutputTuple,
      VotedWithStakeEvent.OutputObject
    >;
    VotedWithStake: TypedContractEvent<
      VotedWithStakeEvent.InputTuple,
      VotedWithStakeEvent.OutputTuple,
      VotedWithStakeEvent.OutputObject
    >;
  };
}
