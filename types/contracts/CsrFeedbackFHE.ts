/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface CsrFeedbackFHEInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "decryptFeedback"
      | "decryptScoreCount"
      | "decryptedFeedbacks"
      | "encryptedFeedbacks"
      | "feedbackCount"
      | "getDecryptedFeedback"
      | "getEncryptedScoreCount"
      | "protocolId"
      | "requestFeedbackDecryption"
      | "requestScoreCountDecryption"
      | "submitEncryptedFeedback"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "DecryptionFulfilled"
      | "DecryptionRequested"
      | "FeedbackDecrypted"
      | "FeedbackSubmitted"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "decryptFeedback",
    values: [BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "decryptScoreCount",
    values: [BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "decryptedFeedbacks",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "encryptedFeedbacks",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "feedbackCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDecryptedFeedback",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getEncryptedScoreCount",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "protocolId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requestFeedbackDecryption",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "requestScoreCountDecryption",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "submitEncryptedFeedback",
    values: [BytesLike, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "decryptFeedback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decryptScoreCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decryptedFeedbacks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "encryptedFeedbacks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feedbackCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDecryptedFeedback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEncryptedScoreCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "protocolId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "requestFeedbackDecryption",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestScoreCountDecryption",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitEncryptedFeedback",
    data: BytesLike
  ): Result;
}

export namespace DecryptionFulfilledEvent {
  export type InputTuple = [requestID: BigNumberish];
  export type OutputTuple = [requestID: bigint];
  export interface OutputObject {
    requestID: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DecryptionRequestedEvent {
  export type InputTuple = [feedbackId: BigNumberish];
  export type OutputTuple = [feedbackId: bigint];
  export interface OutputObject {
    feedbackId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FeedbackDecryptedEvent {
  export type InputTuple = [feedbackId: BigNumberish];
  export type OutputTuple = [feedbackId: bigint];
  export interface OutputObject {
    feedbackId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FeedbackSubmittedEvent {
  export type InputTuple = [feedbackId: BigNumberish, timestamp: BigNumberish];
  export type OutputTuple = [feedbackId: bigint, timestamp: bigint];
  export interface OutputObject {
    feedbackId: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface CsrFeedbackFHE extends BaseContract {
  connect(runner?: ContractRunner | null): CsrFeedbackFHE;
  waitForDeployment(): Promise<this>;

  interface: CsrFeedbackFHEInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  decryptFeedback: TypedContractMethod<
    [requestId: BigNumberish, cleartexts: BytesLike, proof: BytesLike],
    [void],
    "nonpayable"
  >;

  decryptScoreCount: TypedContractMethod<
    [requestId: BigNumberish, cleartexts: BytesLike, proof: BytesLike],
    [void],
    "nonpayable"
  >;

  decryptedFeedbacks: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, boolean] & {
        score: string;
        comment: string;
        isRevealed: boolean;
      }
    ],
    "view"
  >;

  encryptedFeedbacks: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, string, bigint] & {
        feedbackId: bigint;
        encryptedScore: string;
        encryptedComment: string;
        timestamp: bigint;
      }
    ],
    "view"
  >;

  feedbackCount: TypedContractMethod<[], [bigint], "view">;

  getDecryptedFeedback: TypedContractMethod<
    [feedbackId: BigNumberish],
    [
      [string, string, boolean] & {
        score: string;
        comment: string;
        isRevealed: boolean;
      }
    ],
    "view"
  >;

  getEncryptedScoreCount: TypedContractMethod<
    [score: string],
    [string],
    "view"
  >;

  protocolId: TypedContractMethod<[], [bigint], "view">;

  requestFeedbackDecryption: TypedContractMethod<
    [feedbackId: BigNumberish],
    [void],
    "nonpayable"
  >;

  requestScoreCountDecryption: TypedContractMethod<
    [score: string],
    [void],
    "nonpayable"
  >;

  submitEncryptedFeedback: TypedContractMethod<
    [encryptedScore: BytesLike, encryptedComment: BytesLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "decryptFeedback"
  ): TypedContractMethod<
    [requestId: BigNumberish, cleartexts: BytesLike, proof: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "decryptScoreCount"
  ): TypedContractMethod<
    [requestId: BigNumberish, cleartexts: BytesLike, proof: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "decryptedFeedbacks"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, boolean] & {
        score: string;
        comment: string;
        isRevealed: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "encryptedFeedbacks"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, string, bigint] & {
        feedbackId: bigint;
        encryptedScore: string;
        encryptedComment: string;
        timestamp: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "feedbackCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getDecryptedFeedback"
  ): TypedContractMethod<
    [feedbackId: BigNumberish],
    [
      [string, string, boolean] & {
        score: string;
        comment: string;
        isRevealed: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getEncryptedScoreCount"
  ): TypedContractMethod<[score: string], [string], "view">;
  getFunction(
    nameOrSignature: "protocolId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "requestFeedbackDecryption"
  ): TypedContractMethod<[feedbackId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "requestScoreCountDecryption"
  ): TypedContractMethod<[score: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "submitEncryptedFeedback"
  ): TypedContractMethod<
    [encryptedScore: BytesLike, encryptedComment: BytesLike],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "DecryptionFulfilled"
  ): TypedContractEvent<
    DecryptionFulfilledEvent.InputTuple,
    DecryptionFulfilledEvent.OutputTuple,
    DecryptionFulfilledEvent.OutputObject
  >;
  getEvent(
    key: "DecryptionRequested"
  ): TypedContractEvent<
    DecryptionRequestedEvent.InputTuple,
    DecryptionRequestedEvent.OutputTuple,
    DecryptionRequestedEvent.OutputObject
  >;
  getEvent(
    key: "FeedbackDecrypted"
  ): TypedContractEvent<
    FeedbackDecryptedEvent.InputTuple,
    FeedbackDecryptedEvent.OutputTuple,
    FeedbackDecryptedEvent.OutputObject
  >;
  getEvent(
    key: "FeedbackSubmitted"
  ): TypedContractEvent<
    FeedbackSubmittedEvent.InputTuple,
    FeedbackSubmittedEvent.OutputTuple,
    FeedbackSubmittedEvent.OutputObject
  >;

  filters: {
    "DecryptionFulfilled(uint256)": TypedContractEvent<
      DecryptionFulfilledEvent.InputTuple,
      DecryptionFulfilledEvent.OutputTuple,
      DecryptionFulfilledEvent.OutputObject
    >;
    DecryptionFulfilled: TypedContractEvent<
      DecryptionFulfilledEvent.InputTuple,
      DecryptionFulfilledEvent.OutputTuple,
      DecryptionFulfilledEvent.OutputObject
    >;

    "DecryptionRequested(uint256)": TypedContractEvent<
      DecryptionRequestedEvent.InputTuple,
      DecryptionRequestedEvent.OutputTuple,
      DecryptionRequestedEvent.OutputObject
    >;
    DecryptionRequested: TypedContractEvent<
      DecryptionRequestedEvent.InputTuple,
      DecryptionRequestedEvent.OutputTuple,
      DecryptionRequestedEvent.OutputObject
    >;

    "FeedbackDecrypted(uint256)": TypedContractEvent<
      FeedbackDecryptedEvent.InputTuple,
      FeedbackDecryptedEvent.OutputTuple,
      FeedbackDecryptedEvent.OutputObject
    >;
    FeedbackDecrypted: TypedContractEvent<
      FeedbackDecryptedEvent.InputTuple,
      FeedbackDecryptedEvent.OutputTuple,
      FeedbackDecryptedEvent.OutputObject
    >;

    "FeedbackSubmitted(uint256,uint256)": TypedContractEvent<
      FeedbackSubmittedEvent.InputTuple,
      FeedbackSubmittedEvent.OutputTuple,
      FeedbackSubmittedEvent.OutputObject
    >;
    FeedbackSubmitted: TypedContractEvent<
      FeedbackSubmittedEvent.InputTuple,
      FeedbackSubmittedEvent.OutputTuple,
      FeedbackSubmittedEvent.OutputObject
    >;
  };
}
